#!/usr/bin/python3
from pathlib import Path
cfgDir = Path(__file__).resolve().parent.parent.parent
cfgFile = cfgDir/ 'cfg.py'
with open(str(cfgFile)) as O: exec(O.read())

import subprocess

from handyPyUtil.tests import TestKit
from handyPyUtil.subproc import Pipe

def doTest(case):
    with TestKit() as tk:
        tmpDir = tk.tmpDir
        f = tmpDir / "myScript.py"

        subdir = tmpDir / 'subdir'
        subdir.mkdir()

        (tmpDir / '.project_root').write_text("\n")
        (subdir / 'subfile.py').write_text("\n")

        # create a symlink to handyPyUtil cfg.py in tmpDir
        cfgLinkName = case['cfgLinkName']
        if cfgLinkName:
            l = tmpDir / cfgLinkName
            l.symlink_to(cfgFile)

        f.write_text(f"""
{case['importCode']}

inclPath('subdir')

import subfile
import handyPyUtil
""")

        env = case.get('env')

        p = Pipe(['python3', str(f)], env=env)
        if p.status:
            print(p.stderr)

        msg = f"case: {case}"
        if case.get('mustFail'):
            assert p.status, msg
        else:
            assert not p.status, msg


boilerplate = lambda cfgLinkName: f"""
try:from pathlib import Path as P;R=P.resolve;E=P.exists; F = R(P(__file__));\
    L = lambda p: p / '{cfgLinkName}'; from handyPyUtil import inclPath
except: O=open(R(next(filter(E,map(L,F.parents))))); exec(O.read()); O.close()
"""


cases = [
    {
        'cfgLinkName': None,
        'importCode': f"""
from pathlib import Path
with open("{str(cfgFile)}") as O: exec(O.read())
""",
    }, {
        'cfgLinkName': "cfg.py",
        'importCode': boilerplate('cfg.py'),
    }, {
        'cfgLinkName': "my_cfg_link.py",
        'importCode': boilerplate('my_cfg_link.py'),
    }, {
        'cfgLinkName': None,
        'importCode': boilerplate('cfg.py'),
        'mustFail': True,
    }, {
        'cfgLinkName': None,
        'importCode': boilerplate('cfg.py'),
        'env': {'PYTHONPATH': f'{cfgDir.parent}'},
        'mustFail': False,
    },
]

for case in cases:
    doTest(case)
