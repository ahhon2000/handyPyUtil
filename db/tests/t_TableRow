#!/usr/bin/python3
try:from pathlib import Path as P;R=P.resolve;E=P.exists; F = R(P(__file__));\
    L = lambda p: p / 'cfg.py'; from handyPyUtil import A; exec(A)
except: O=open(R(next(filter(E,map(L,F.parents))))); exec(O.read()); O.close()

import sys
import os
from pathlib import Path

from . import TestKitDB
from ..Database import DBTYPES
from .. import Database_mysql, Database_sqlite

from math import isclose

from ..TableRow import TableRow
from ..exceptions import *


N_RECORDS = 10
TableData = {}   # format:   {Id: dict_of_corr_values}
for Id in range(1, N_RECORDS + 1):
    n, x, s = Id ** 2, Id ** 0.5, f'str_{Id}'
    cvs = {'n': n, 'x': x, 's': s}
    TableData[Id] = cvs



class MyTableRow(TableRow):
    tableName = 'my_table_row'
    columnDefs = {
        'id': {
            DBTYPES.sqlite: 'INTEGER NOT NULL PRIMARY KEY',
            DBTYPES.mysql: 'INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT',
        },
        'n': {
            DBTYPES.sqlite: 'INTEGER NOT NULL DEFAULT 0',
            DBTYPES.mysql: 'INTEGER NOT NULL DEFAULT 0',
        },
        'x': {
            DBTYPES.sqlite: 'FLOAT NOT NULL DEFAULT 0.',
            DBTYPES.mysql: 'FLOAT(53) NOT NULL DEFAULT 0.',
        },
        's': {
            DBTYPES.sqlite: 'VARCHAR(14) NOT NULL',
            DBTYPES.mysql: 'VARCHAR(14) NOT NULL',
        },
    }


def chkAgainstOriginalData(Id, mtr):
    cvs = TableData[Id]
    assert mtr.n == cvs['n']
    assert isclose(mtr.x, cvs['x']), f"x={mtr.x} but should be {cvs['x']}"
    assert mtr.s == cvs['s']


def idSearchFails(qq, Id):
    fails = False
    try:
        MyTableRow(qq, _fromId=Id)
    except ExcRecordNotFound:
        fails = True
    return fails

def getNRecords(q):
    return q[0]['n'] / f'SELECT count(id) as n FROM {MyTableRow.tableName}'

def populate(tk, q):
    MyTableRow.createTable(q)

    # make sure _fromId initialisation fails on an empty table
    assert idSearchFails(q, 1)

    # populate the table
    mtrs = []
    for Id in range(1, N_RECORDS + 1):
        cvs = TableData[Id]
        mtr = MyTableRow(q, **cvs)
        mtr.save()
        mtrs.append(mtr)

        assert idSearchFails(q, Id+1)
        assert idSearchFails(q, N_RECORDS+1)

    # check if data can be recovered unchanged
    for Id, mtr0 in enumerate(mtrs, start=1):
        mtr1 = MyTableRow(q, _fromId=Id)

        # test mtr1 against the correct values
        chkAgainstOriginalData(Id, mtr1)

        # test mtr1 against the object initially committed to the DB
        assert mtr0.same(mtr1)

def chkDelete(tk, q):
    delIds = (N_RECORDS // 2 - 1, N_RECORDS // 2, N_RECORDS // 2 + 1)
    assert delIds[0] < delIds[1]  and  delIds[1] < delIds[2]

    for nDeletes, (delId, commit) in enumerate(
        zip(delIds, (None, True, False)), start=1
    ):
        q.reconnect()

        mtr = MyTableRow(q, _fromId=delId)
        assert not mtr._flgDeleted

        if commit is None:
            mtr.delete()
        else:
            mtr.delete(commit=commit)

        assert mtr._flgDeleted

        if commit is False:
            q.reconnect()
            n = getNRecords(q)
            assert n == N_RECORDS - nDeletes + 1
            assert not idSearchFails(q, delId)
        else:
            n = getNRecords(q)
            assert n == N_RECORDS - nDeletes
            assert idSearchFails(q, delId)

def chkCast(tk, q):
    class MyBindObject:
        q = q
    mbo = MyBindObject()

    req = f"SELECT * FROM {MyTableRow.tableName} ORDER BY id"
    mtrs1 = q / MyTableRow / req
    mtrs2 = q(bindObject=mbo) / MyTableRow / req

    for mtrs, bo in ((mtrs1, q), (mtrs2, mbo)):
        for mtr in mtrs:
            assert isinstance(mtr, MyTableRow)
            chkAgainstOriginalData(mtr.id, mtr)
            assert mtr._bindObject is bo

with TestKitDB() as tk:
    for DBCls in (
        Database_sqlite,
        Database_mysql,
    ):
        q = tk.connect(DBCls=DBCls)
        populate(tk, q)

        chkCast(tk, q)
        chkDelete(tk, q)
