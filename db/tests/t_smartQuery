#!/usr/bin/python3
try:from pathlib import Path as P;R=P.resolve;E=P.exists; F = R(P(__file__));\
    L = lambda p: p / 'cfg.py'; from handyPyUtil import A; exec(A)
except: O=open(R(next(filter(E,map(L,F.parents))))); exec(O.read()); O.close()

from . import TestKitDB
from ..Database import DBTYPES
from .. import Database_mysql, Database_mysql

def general(q, tk):
    rs = q / "SELECT 138 AS x"
    assert next(rs)['x'] == 138

    r = q(0) / "SELECT 148 AS y"
    assert r['y'] == 148

    rs = q(aslist=True) / "SELECT NULL AS x"
    assert rs[0]['x'] is None

    q / f"""
        CREATE TABLE vegetables (
            id INT PRIMARY KEY AUTO_INCREMENT,
            name VARCHAR(32) NOT NULL
        )
    """

    q / f"""
        INSERT INTO vegetables (name) VALUES
        ('potatoes'), ('tomatoes'), ('carrots')
    """

    ns = q(
        cast = lambda r: r['name'].capitalize(),
        aslist = True,
    ) / f"""
        SELECT * FROM vegetables ORDER BY name
    """

    assert ns == ['Carrots', 'Potatoes', 'Tomatoes'], f'ns={ns}'

    n = q(0, name='potatoes') / """
        SELECT * FROM vegetables WHERE name=%(name)s
    """
    assert n['name'] == 'potatoes', f"n = {n}"

def placeholders(q, tk):
    # check positional placeholders

    r = "SELECT name FROM vegetables WHERE name != %s and name != %s"

    # syntax v. 1
    rs = q / ['carrots', 'tomatoes'] / r
    assert next(rs)['name'] == 'potatoes'

    # syntax v. 2
    rs = q(('carrots', 'tomatoes')) / r
    assert next(rs)['name'] == 'potatoes'

    # syntax v. 3
    rs = q / q(['carrots', 'tomatoes']) / r
    assert next(rs)['name'] == 'potatoes'

    # syntax v. 4
    rs = q * 'carrots' * 'tomatoes' / r
    assert next(rs)['name'] == 'potatoes'

    # syntax mix
    rs = q(['carrots']) * 'tomatoes' / r
    assert next(rs)['name'] == 'potatoes'


with TestKitDB() as tk:
    for DBCls in (
        #Database_sqlite,  # TODO enable
        Database_mysql,
    ):
        q = tk.connect(DBCls=DBCls)

        general(q, tk)
        placeholders(q, tk)
