#!/usr/bin/python3
try:from pathlib import Path as P;R=P.resolve;E=P.exists; F = R(P(__file__));\
    L = lambda p: p / 'cfg.py'; from handyPyUtil import A; exec(A)
except: O=open(R(next(filter(E,map(L,F.parents))))); exec(O.read()); O.close()

from . import TestKitDB
from ..Database import DBTYPES
from .. import Database_sqlite, Database_mysql
from .. import TableRow

def populate(q, tk):
    idColDef = "INTEGER NOT NULL PRIMARY KEY"
    if q.dbtype == DBTYPES.mysql: idColDef += f' AUTO_INCREMENT'

    q / f"""
        CREATE TABLE vegetables (
            id {idColDef},
            name VARCHAR(32) NOT NULL
        )
    """

    q / f"""
        INSERT INTO vegetables (name) VALUES
        ('potatoes'), ('tomatoes'), ('carrots')
    """

def general(q, tk):
    rs = q / "SELECT 138 AS x"
    assert next(rs)['x'] == 138

    r = q[0] / "SELECT 148 AS y"
    assert r['y'] == 148

    rs = q(aslist=True) / "SELECT NULL AS x"
    assert rs[0]['x'] is None

    n = q(name='potatoes')[0] / f"""
        SELECT * FROM vegetables WHERE name=%(name)s
    """
    assert n['name'] == 'potatoes', f"n = {n}"

def placeholders(q, tk):
    # check positional placeholders

    req = f"SELECT name FROM vegetables WHERE name != %s and name != %s"

    # syntax v. 1
    rs = q / ['carrots', 'tomatoes'] / req
    assert next(rs)['name'] == 'potatoes'

    # syntax v. 2
    rs = q(('carrots', 'tomatoes')) / req
    assert next(rs)['name'] == 'potatoes'

    # syntax v. 3
    rs = q / q(['carrots', 'tomatoes']) / req
    assert next(rs)['name'] == 'potatoes'

    # syntax v. 4
    rs = q * 'carrots' * 'tomatoes' / req
    assert next(rs)['name'] == 'potatoes'

    # syntax mix
    rs = q(['carrots']) * 'tomatoes' / req
    assert next(rs)['name'] == 'potatoes'

def casting(q, tk):
    req = f"""
        SELECT * FROM vegetables ORDER BY name
    """

    ns = q(
        cast = lambda r: r['name'].capitalize(),
        aslist = True,
    ) / req
    assert ns == ['Carrots', 'Potatoes', 'Tomatoes'], f'ns={ns}'

    class Veg:
        def __init__(self, row):
            self.id = row['id']
            self.name = row['name']

    ns = q(aslist=True, cast=Veg) / req
    assert ns[0].name == 'carrots'
    assert ns[1].name == 'potatoes'
    assert ns[2].name == 'tomatoes'

    # cast function compositions

    vegToName = lambda veg: veg.name
    f1 = lambda s: f'{s}_f1'
    f2 = lambda s: f'{s}_f2'
    for i, ns in enumerate((
        q / f1 / f2 / vegToName / Veg / req,
        q / f1 / q / f2 / vegToName / Veg / req,
        q / f1 / q / f2 / vegToName / Veg / q / req,
        q / f1 / q / f2 / vegToName / q(cast=Veg) / req,
        q(
            cmpst_cast = (f1, f2, vegToName, Veg),
        ) / req,
        q(
            cast = Veg,
            cmpst_cast = (f1, f2, vegToName),
        ) / req,
        q(
            cast = Veg, carg = (),
            cmpst_cast = (f1, f2, vegToName),
        ) / req,
    )):
        ns = list(ns)
        assert tuple(ns) == (
            'carrots_f2_f1', 'potatoes_f2_f1', 'tomatoes_f2_f1'
        ), f'ns = {ns}'

class VegTR(TableRow):
    _columnDefs = {
        'id': {},
        'name': {},
        'x': {}, 'y': {},
    }
    def __init__(self, bo, *arg, **kwarg):
        super().__init__(bo, **kwarg)
        self.arg = arg
        self.kwarg = kwarg

def tableRowCasting(q, tk):

    req = "SELECT * FROM vegetables ORDER BY name"

    # the bind object should be set to the DB instance by default
    vs = q / VegTR / req
    for v in vs:
        assert v._dbobj is q, f"v._dbobj = {v._dbobj}"
        assert v._bindObject is q, f"v._bindObject = {v._bindObject}"

    # check if setting a bindObject explicitly works

    class Owner:
        def __init__(self, q):
            self.q = q

    owner = Owner(q)

    for arg, kwarg in (
        ((), {}),
        (('alpha',), {'x': 3, 'y': 10}),
    ):
        vs = q(bindObject=owner, cast=VegTR, carg=arg, ckwarg=kwarg) / req
        for v in vs:
            assert v._dbobj is q, f"v._dbobj = {v._dbobj}"
            assert v._bindObject is owner, f"v._bindObject = {v._bindObject}"
            assert list(arg) == list(v.arg), f'arg={arg}; v.arg={v.arg}'
            for k, kv in kwarg.items():
                assert kv == v.kwarg[k]

def subscripts(q, tk):
    req = "SELECT * FROM vegetables ORDER BY name"
    l = lambda row: row['name']

    r = q[0] / req
    assert r['name'] == 'carrots'

    r = q[-1] / req
    assert r['name'] == 'tomatoes', f'r = {r}'

    ns = tuple(q[0:2] / l / req)
    assert ns == ('carrots', 'potatoes'), f'ns = {ns}'

    ns = tuple(q[0:-1:-1] / l / req)
    assert ns == (), f'ns = {ns}'

    ns = tuple(q[-1::-1] / l / req)
    assert ns == ('tomatoes', 'potatoes', 'carrots')

    ns = tuple(q[-1:1:-1] / l / req)
    assert ns == ('tomatoes',)

    ns = tuple(q[0::2] / l / req)
    assert ns == ('carrots', 'tomatoes')

    ns = tuple(q[-1::-2] / l / req)
    assert ns == ('tomatoes', 'carrots')

    n = q[0]['name'] / req
    assert n == 'carrots'

    n = q[0]['name'][-1] / req
    assert n == 's'

    n = q[0]['name'][3:6] / req
    assert n == 'rot'

    n = q[0]['name'][slice(3,6)] / req
    assert n == 'rot'

    # With row conversion

    ns = tuple(q(cast=l)[0:2] / req)
    assert ns == ('carrots', 'potatoes')

    ns = tuple(q(cast=l)[slice(1,3)] / req)
    assert ns == ('potatoes', 'tomatoes')

    ns = tuple(q[slice(1,3)] / l / req)
    assert ns == ('potatoes', 'tomatoes')

    ns = tuple(q()[slice(1,3)] / l / req)
    assert ns == ('potatoes', 'tomatoes')

    n = q()[slice(1,3)][1] / l / req
    assert n == 'tomatoes', f'n = {n}'


with TestKitDB() as tk:
    for DBCls in (
        Database_sqlite,
        Database_mysql,
    ):
        q = tk.connect(DBCls=DBCls)
        populate(q, tk)

        general(q, tk)
        placeholders(q, tk)
        casting(q, tk)
        tableRowCasting(q, tk)
        subscripts(q, tk)
